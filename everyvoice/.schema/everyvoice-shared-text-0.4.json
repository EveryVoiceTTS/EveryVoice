{
  "$defs": {
    "LanguageBoundaries": {
      "properties": {
        "strong": {
          "default": "!?.",
          "description": "All characters that constitute strong boundaries, for one language.",
          "title": "Strong",
          "type": "string"
        },
        "weak": {
          "default": ":;,",
          "description": "All characters that constitute strong boundaries, for one language.",
          "title": "Weak",
          "type": "string"
        }
      },
      "title": "LanguageBoundaries",
      "type": "object"
    },
    "Punctuation": {
      "properties": {
        "exclamations": {
          "default": [
            "!",
            "\u00a1"
          ],
          "description": "Exclamation punctuation symbols used in your datasets. Replaces these symbols with <EXCL> internally.",
          "items": {
            "type": "string"
          },
          "title": "Exclamations",
          "type": "array"
        },
        "question_symbols": {
          "default": [
            "?",
            "\u00bf"
          ],
          "description": "Question/interrogative punctuation symbols used in your datasets. Replaces these symbols with <QINT> internally.",
          "items": {
            "type": "string"
          },
          "title": "Question Symbols",
          "type": "array"
        },
        "quotemarks": {
          "default": [
            "\"",
            "'",
            "\u201c",
            "\u201d",
            "\u00ab",
            "\u00bb"
          ],
          "description": "Quotemark punctuation symbols used in your datasets. Replaces these symbols with <QUOTE> internally.",
          "items": {
            "type": "string"
          },
          "title": "Quotemarks",
          "type": "array"
        },
        "parentheses": {
          "default": [
            "(",
            ")",
            "[",
            "]",
            "{",
            "}"
          ],
          "description": "Punctuation symbols indicating parentheses, brackets, or braces. Replaces these symbols with <PAREN> internally.",
          "items": {
            "type": "string"
          },
          "title": "Parentheses",
          "type": "array"
        },
        "periods": {
          "default": [
            "."
          ],
          "description": "Punctuation symbols indicating a 'period' used in your datasets. Replaces these symbols with <PERIOD> internally.",
          "items": {
            "type": "string"
          },
          "title": "Periods",
          "type": "array"
        },
        "colons": {
          "default": [
            ":"
          ],
          "description": "Punctuation symbols indicating a 'colon' used in your datasets. Replaces these symbols with <COLON> internally.",
          "items": {
            "type": "string"
          },
          "title": "Colons",
          "type": "array"
        },
        "semi_colons": {
          "default": [
            ";"
          ],
          "description": "Punctuation symbols indicating a 'semi-colon' used in your datasets. Replaces these symbols with <SEMICOL> internally.",
          "items": {
            "type": "string"
          },
          "title": "Semi Colons",
          "type": "array"
        },
        "hyphens": {
          "default": [
            "-",
            "\u2014",
            "*"
          ],
          "description": "Punctuation symbols indicating a 'hyphen' used in your datasets. * is a hyphen by default since unidecode decodes middle-dot punctuation as an asterisk. Replaces these symbols with <HYPHEN> internally.",
          "items": {
            "type": "string"
          },
          "title": "Hyphens",
          "type": "array"
        },
        "commas": {
          "default": [
            ","
          ],
          "description": "Punctuation symbols indicating a 'comma' used in your datasets. Replaces these symbols with <COMMA> internally.",
          "items": {
            "type": "string"
          },
          "title": "Commas",
          "type": "array"
        },
        "ellipses": {
          "default": [
            "\u2026"
          ],
          "description": "Punctuation symbols indicating ellipses used in your datasets. Replaces these symbols with <EPS> internally.",
          "items": {
            "type": "string"
          },
          "title": "Ellipses",
          "type": "array"
        }
      },
      "title": "Punctuation",
      "type": "object"
    },
    "Symbols": {
      "additionalProperties": true,
      "properties": {
        "silence": {
          "default": [
            "<SIL>"
          ],
          "description": "The symbol(s) used to indicate silence.",
          "items": {
            "type": "string"
          },
          "title": "Silence",
          "type": "array"
        },
        "punctuation": {
          "allOf": [
            {
              "$ref": "#/$defs/Punctuation"
            }
          ],
          "description": "EveryVoice will combine punctuation and normalize it into a set of five permissible types of punctuation to help tractable training."
        }
      },
      "title": "Symbols",
      "type": "object"
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "additionalProperties": false,
  "properties": {
    "symbols": {
      "$ref": "#/$defs/Symbols"
    },
    "to_replace": {
      "additionalProperties": {
        "type": "string"
      },
      "default": {},
      "description": "Map of match->replacement to apply on training and run-time text, before cleaners are applied. Superceded by language_to_replace when processing text in a language which has language-specific text replacements, which are in turn superceded by dataset_to_replace when processing a dataset which has dataset-specific text replacements.",
      "title": "Global text replacements",
      "type": "object"
    },
    "language_to_replace": {
      "additionalProperties": {
        "additionalProperties": {
          "type": "string"
        },
        "type": "object"
      },
      "default": {},
      "description": "Map from language code to text replacement maps. Supercedes the global text replacements when defined for a given language. Superceded by dataset_to_replace when processing a dataset which has dataset-specific text replacements.",
      "title": "Language-specific text replacements",
      "type": "object"
    },
    "dataset_to_replace": {
      "additionalProperties": {
        "additionalProperties": {
          "type": "string"
        },
        "type": "object"
      },
      "default": {},
      "description": "Map from dataset label to replacement maps. Supercedes both the global text replacements and language_to_replace when defined for a given dataset.",
      "title": "Dataset-specific text replacements.",
      "type": "object"
    },
    "cleaners": {
      "description": "List of cleaners to apply to all datasets and run-time data. Superceded by language_cleaners when processing text in a language which has language-specific cleaners, which are in turn superceded by dataset_cleaners when processing a dataset which has dataset-specific cleaners.",
      "items": {
        "type": "string"
      },
      "title": "Global cleaners",
      "type": "array"
    },
    "language_cleaners": {
      "additionalProperties": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "default": {},
      "description": "Map from language code to cleaner lists. Supercedes the global cleaners when defined for a given language. Superceded by dataset_cleaners when processing a dataset which has dataset-specific cleaners.",
      "title": "Language-specific cleaners",
      "type": "object"
    },
    "dataset_cleaners": {
      "additionalProperties": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "default": {},
      "description": "Map from dataset label to cleaner lists. Supercedes both the global cleaners and language_cleaners when defined for a given dataset.",
      "title": "Dataset-specific cleaners",
      "type": "object"
    },
    "g2p_engines": {
      "additionalProperties": {
        "examples": [
          "everyvoice_plugin_g2p4example.g2p"
        ],
        "type": "string"
      },
      "default": {},
      "description": "User defined or external G2P engines.\nSee https://github.com/EveryVoiceTTS/everyvoice_g2p_template_plugin to implement your own G2P.",
      "examples": [
        "{\"fr\": \"everyvoice_plugin_g2p4example.g2p\"}"
      ],
      "title": "External G2P",
      "type": "object"
    },
    "split_text": {
      "default": true,
      "description": "Whether or not to perform text splitting (also referred to as text chunking) at inference time. Instead of synthesizing an entire utterance, the utterance will be split into smaller chunks and re-combined after synthesis. This can lead to more natural synthesis for long-form (i.e. paragraph) synthesis.",
      "title": "Split Text",
      "type": "boolean"
    },
    "boundaries": {
      "additionalProperties": {
        "$ref": "#/$defs/LanguageBoundaries"
      },
      "default": {},
      "description": "Strong and Weak boundaries on which text splitting is to be performed, for every language.",
      "examples": [
        "{'eng': {'strong': '!?.', 'weak': ':;,'}}'"
      ],
      "title": "Boundaries",
      "type": "object"
    }
  },
  "title": "TextConfig",
  "type": "object"
}
